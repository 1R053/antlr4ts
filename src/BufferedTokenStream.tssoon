/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// ConvertTo-TS run at 2016-10-04T11:26:49.6074365-07:00

/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * <p>
 * This token stream ignores the value of {@link Token#getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token#DEFAULT_CHANNEL} or
 * {@link Token#HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.</p>
 */
export class BufferedTokenStream implements TokenStream {
	/**
	 * The {@link TokenSource} from which tokens for this stream are fetched.
	 */
	@NotNull
    protected tokenSource: TokenSource; 

	/**
	 * A collection of all tokens fetched from the token source. The list is
	 * considered a complete view of the input once {@link #fetchedEOF} is set
	 * to {@code true}.
	 */
    protected tokens: List<Token> =  new ArrayList<Token>(100);

	/**
	 * The index into {@link #tokens} of the current token (next token to
	 * {@link #consume}). {@link #tokens}{@code [}{@link #p}{@code ]} should be
	 * {@link #LT LT(1)}.
	 *
	 * <p>This field is set to -1 when the stream is first constructed or when
	 * {@link #setTokenSource} is called, indicating that the first token has
	 * not yet been fetched from the token source. For additional information,
	 * see the documentation of {@link IntStream} for a description of
	 * Initializing Methods.</p>
	 */
    protected p: number =  -1;

	/**
	 * Indicates whether the {@link Token#EOF} token has been fetched from
	 * {@link #tokenSource} and added to {@link #tokens}. This field improves
	 * performance for the following cases:
	 *
	 * <ul>
	 * <li>{@link #consume}: The lookahead check in {@link #consume} to prevent
	 * consuming the EOF symbol is optimized by checking the values of
	 * {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.</li>
	 * <li>{@link #fetch}: The check to prevent adding multiple EOF symbols into
	 * {@link #tokens} is trivial with this field.</li>
	 * <ul>
	 */
	protected fetchedEOF: boolean; 

     constructor(@NotNull tokenSource: TokenSource)  {
		if (tokenSource == null) {
			throw new NullPointerException("tokenSource cannot be null");
		}
        this.tokenSource = tokenSource;
    }

    @Override
    getTokenSource(): TokenSource { return tokenSource; }

	@Override
	index(): number { return p; }

    @Override
    mark(): number {
		return 0;
	}

	@Override
	release(marker: number): void {
		// no resources to release
	}

    reset(): void {
        seek(0);
    }

    @Override
    seek(index: number): void {
        lazyInit();
        p = adjustSeekIndex(index);
    }

    @Override
    size() { return tokens.size(): number; }

    @Override
    consume(): void {
		let skipEofCheck: boolean; 
		if (p >= 0) {
			if (fetchedEOF) {
				// the last token in tokens is EOF. skip check if p indexes any
				// fetched token except the last.
				skipEofCheck = p < tokens.size() - 1;
			}
			else {
				// no EOF token in tokens. skip check if p indexes a fetched token.
				skipEofCheck = p < tokens.size();
			}
		}
		else {
			// not yet initialized
			skipEofCheck = false;
		}

		if (!skipEofCheck && LA(1) == EOF) {
			throw new IllegalStateException("cannot consume EOF");
		}

		if (sync(p + 1)) {
			p = adjustSeekIndex(p + 1);
		}
    }

    /** Make sure index {@code i} in tokens has a token.
	 *
	 * @return {@code true} if a token is located at index {@code i}, otherwise
	 *    {@code false}.
	 * @see #get(int i)
	 */
    protected sync(i: number): boolean {
		assert(i >= 0);
        let n: number =  i - tokens.size() + 1; // how many more elements we need?
        //System.out.println("sync("+i+") needs "+n);
        if ( n > 0 ) {
			let fetched: number =  fetch(n);
			return fetched >= n;
		}

		return true;
    }

    /** Add {@code n} elements to buffer.
	 *
	 * @return The actual number of elements added to the buffer.
	 */
    protected fetch(n: number): number {
		if (fetchedEOF) {
			return 0;
		}

        for (let i = 0; i < n; i++) {
            let t: Token =  tokenSource.nextToken();
            if ( t instanceof WritableToken ) {
                ((WritableToken)t).setTokenIndex(tokens.size());
            }
            tokens.add(t);
            if ( t.getType()==Token.EOF ) {
				fetchedEOF = true;
				return i + 1;
			}
        }

		return n;
    }

    @Override
    get(i: number): Token {
        if ( i < 0 || i >= tokens.size() ) {
            throw new IndexOutOfBoundsException("token index "+i+" out of range 0.."+(tokens.size()-1));
        }
        return tokens.get(i);
    }

	/** Get all tokens from start..stop inclusively. */
	get(start: number, stop: number): List<Token> {
		if ( start<0 || stop<0 ) return null;
		lazyInit();
		let subset: List<Token> =  new ArrayList<Token>();
		if ( stop>=tokens.size() ) stop = tokens.size()-1;
		for (let i = start; i <= stop; i++) {
			let t: Token =  tokens.get(i);
			if ( t.getType()==Token.EOF ) break;
			subset.add(t);
		}
		return subset;
	}

	@Override
	LA(int i) { return LT(i).getType(): number; }

    protected LB(k: number): Token {
        if ( (p-k)<0 ) return null;
        return tokens.get(p-k);
    }

	@NotNull
    @Override
    LT(k: number): Token {
        lazyInit();
        if ( k==0 ) return null;
        if ( k < 0 ) return LB(-k);

		let i: number =  p + k - 1;
		sync(i);
        if ( i >= tokens.size() ) { // return EOF token
            // EOF must be last token
            return tokens.get(tokens.size()-1);
        }
//		if ( i>range ) range = i;
        return tokens.get(i);
    }

	/**
	 * Allowed derived classes to modify the behavior of operations which change
	 * the current stream position by adjusting the target token index of a seek
	 * operation. The default implementation simply returns {@code i}. If an
	 * exception is thrown in this method, the current stream index should not be
	 * changed.
	 *
	 * <p>For example, {@link CommonTokenStream} overrides this method to ensure that
	 * the seek target is always an on-channel token.</p>
	 *
	 * @param i The target token index.
	 * @return The adjusted target token index.
	 */
	protected adjustSeekIndex(i: number): number {
		return i;
	}

	protected lazyInit(): void {
		if (p == -1) {
			setup();
		}
	}

    protected setup(): void {
		sync(0);
		p = adjustSeekIndex(0);
	}

    /** Reset this token stream by setting its token source. */
    setTokenSource(tokenSource: TokenSource): void {
        this.tokenSource = tokenSource;
        tokens.clear();
        p = -1;
    }

    getTokens(): List<Token> { return tokens; }

    getTokens(start: number, stop: number): List<Token> {
        return getTokens(start, stop, null);
    }

    /** Given a start and stop index, return a {@code List} of all tokens in
     *  the token type {@code BitSet}.  Return {@code null} if no tokens were found.  This
     *  method looks at both on and off channel tokens.
     */
    getTokens(start: number, stop: number, types: BitSet): List<Token> {
        lazyInit();
		if ( start<0 || stop>=tokens.size() ||
			 stop<0  || start>=tokens.size() )
		{
			throw new IndexOutOfBoundsException("start "+start+" or stop "+stop+
												" not in 0.."+(tokens.size()-1));
		}

        if ( start>stop ) return null;

        // list = tokens[start:stop]:{T t, t.getType() in types}
        let filteredTokens: List<Token> =  new ArrayList<Token>();
        for (let i=start; i<=stop; i++) {
            let t: Token =  tokens.get(i);
            if ( types==null || types.get(t.getType()) ) {
                filteredTokens.add(t);
            }
        }
        if ( filteredTokens.isEmpty() ) {
            filteredTokens = null;
        }
        return filteredTokens;
    }

    getTokens(start: number, stop: number, ttype: number): List<Token> {
		let s: BitSet =  new BitSet(ttype);
		s.set(ttype);
		return getTokens(start,stop, s);
    }

	/**
	 * Given a starting index, return the index of the next token on channel.
	 * Return {@code i} if {@code tokens[i]} is on channel. Return the index of
	 * the EOF token if there are no tokens on channel between {@code i} and
	 * EOF.
	 */
	protected nextTokenOnChannel(i: number, channel: number): number {
		sync(i);
		if (i >= size()) {
			return size() - 1;
		}

		let token: Token =  tokens.get(i);
		while ( token.getChannel()!=channel ) {
			if ( token.getType()==Token.EOF ) {
				return i;
			}

			i++;
			sync(i);
			token = tokens.get(i);
		}

		return i;
	}

	/**
	 * Given a starting index, return the index of the previous token on
	 * channel. Return {@code i} if {@code tokens[i]} is on channel. Return -1
	 * if there are no tokens on channel between {@code i} and 0.
	 *
	 * <p>
	 * If {@code i} specifies an index at or after the EOF token, the EOF token
	 * index is returned. This is due to the fact that the EOF token is treated
	 * as though it were on every channel.</p>
	 */
	protected previousTokenOnChannel(i: number, channel: number): number {
		sync(i);
		if (i >= size()) {
			// the EOF token is on every channel
			return size() - 1;
		}

		while (i >= 0) {
			let token: Token =  tokens.get(i);
			if (token.getType() == Token.EOF || token.getChannel() == channel) {
				return i;
			}

			i--;
		}

		return i;
	}

	/** Collect all tokens on specified channel to the right of
	 *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL} or
	 *  EOF. If {@code channel} is {@code -1}, find any non default channel token.
	 */
	getHiddenTokensToRight(tokenIndex: number, channel: number): List<Token> {
		lazyInit();
		if ( tokenIndex<0 || tokenIndex>=tokens.size() ) {
			throw new IndexOutOfBoundsException(tokenIndex+" not in 0.."+(tokens.size()-1));
		}

		let nextOnChannel: number = 
			nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		let to: number; 
		let from: number =  tokenIndex+1;
		// if none onchannel to right, nextOnChannel=-1 so set to = last token
		if ( nextOnChannel == -1 ) to = size()-1;
		else to = nextOnChannel;

		return filterForChannel(from, to, channel);
	}

	/** Collect all hidden tokens (any off-default channel) to the right of
	 *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL}
	 *  or EOF.
	 */
	getHiddenTokensToRight(tokenIndex: number): List<Token> {
		return getHiddenTokensToRight(tokenIndex, -1);
	}

	/** Collect all tokens on specified channel to the left of
	 *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL}.
	 *  If {@code channel} is {@code -1}, find any non default channel token.
	 */
	getHiddenTokensToLeft(tokenIndex: number, channel: number): List<Token> {
		lazyInit();
		if ( tokenIndex<0 || tokenIndex>=tokens.size() ) {
			throw new IndexOutOfBoundsException(tokenIndex+" not in 0.."+(tokens.size()-1));
		}

		if (tokenIndex == 0) {
			// obviously no tokens can appear before the first token
			return null;
		}

		let prevOnChannel: number = 
			previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		if ( prevOnChannel == tokenIndex - 1 ) return null;
		// if none onchannel to left, prevOnChannel=-1 then from=0
		let from: number =  prevOnChannel+1;
		let to: number =  tokenIndex-1;

		return filterForChannel(from, to, channel);
	}

	/** Collect all hidden tokens (any off-default channel) to the left of
	 *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL}.
	 */
	getHiddenTokensToLeft(tokenIndex: number): List<Token> {
		return getHiddenTokensToLeft(tokenIndex, -1);
	}

	protected filterForChannel(from: number, to: number, channel: number): List<Token> {
		let hidden: List<Token> =  new ArrayList<Token>();
		for (let i=from; i<=to; i++) {
			let t: Token =  tokens.get(i);
			if ( channel==-1 ) {
				if ( t.getChannel()!= Lexer.DEFAULT_TOKEN_CHANNEL ) hidden.add(t);
			}
			else {
				if ( t.getChannel()==channel ) hidden.add(t);
			}
		}
		if ( hidden.isEmpty() ) return null;
		return hidden;
	}

	@Override
    getSourceName() {	return tokenSource.getSourceName(): string;	}

	/** Get the text of all tokens in this buffer. */
	@NotNull
	@Override
	getText(): string {
		fill();
		return getText(Interval.of(0,size()-1));
	}

	@NotNull
    @Override
    getText(interval: Interval): string {
		let start: number =  interval.a;
		let stop: number =  interval.b;
        if ( start<0 || stop<0 ) return "";
        lazyInit();
        if ( stop>=tokens.size() ) stop = tokens.size()-1;

		let buf: StringBuilder =  new StringBuilder();
		for (let i = start; i <= stop; i++) {
			let t: Token =  tokens.get(i);
			if ( t.getType()==Token.EOF ) break;
			buf.append(t.getText());
		}
		return buf.toString();
    }

	@NotNull
	@Override
	getText(ctx: RuleContext): string {
		return getText(ctx.getSourceInterval());
	}

	@NotNull
    @Override
    getText(start: any, stop: any): string {
        if ( start instanceof Token && stop instanceof Token ) {
            return getText(Interval.of(((Token)start).getTokenIndex(), ((Token)stop).getTokenIndex()));
        }

		return "";
    }

    /** Get all tokens from lexer until EOF. */
    fill(): void {
        lazyInit();
		blockSize: number =  1000;
		while (true) {
			let fetched: number =  fetch(blockSize);
			if (fetched < blockSize) {
				return;
			}
		}
    }
}
