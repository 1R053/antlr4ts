/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ConvertTo-TS run at 2016-10-04T11:26:39.4252545-07:00

/**
 *
 * @author Sam Harwell
 */
export class SparseEdgeMap<T> extends AbstractEdgeMap<T> {
	private static DEFAULT_MAX_SIZE: number =  5;

	private keys: number[]; 
	private values: List<T>; 

	 constructor(minIndex: number, maxIndex: number)  {
		this(minIndex, maxIndex, DEFAULT_MAX_SIZE);
	}

	 constructor1(minIndex: number, maxIndex: number, maxSparseSize: number)  {
		super(minIndex, maxIndex);
		this.keys = new int[maxSparseSize];
		this.values = new ArrayList<T>(maxSparseSize);
	}

	 constructor2(@NotNull map: SparseEdgeMap<T>, maxSparseSize: number)  {
		super(map.minIndex, map.maxIndex);
		synchronized (map) {
			if (maxSparseSize < map.values.size()) {
				throw new IllegalArgumentException();
			}

			keys = Arrays.copyOf(map.keys, maxSparseSize);
			values = new ArrayList<T>(maxSparseSize);
			values.addAll(map.values);
		}
	}

	getKeys(): number[] {
		return keys;
	}

	getValues(): List<T> {
		return values;
	}

	getMaxSparseSize(): number {
		return keys.length;
	}

	@Override
	size(): number {
		return values.size();
	}

	@Override
	isEmpty(): boolean {
		return values.isEmpty();
	}

	@Override
	containsKey(key: number): boolean {
		return get(key) != null;
	}

	@Override
	get(key: number): T {
		// Special property of this collection: values are only even added to
		// the end, else a new object is returned from put(). Therefore no lock
		// is required in this method.
		let index: number =  Arrays.binarySearch(keys, 0, size(), key);
		if (index < 0) {
			return null;
		}

		return values.get(index);
	}

	@Override
	put(key: number, value: T): AbstractEdgeMap<T> {
		if (key < minIndex || key > maxIndex) {
			return this;
		}

		if (value == null) {
			return remove(key);
		}

		synchronized (this) {
			let index: number =  Arrays.binarySearch(keys, 0, size(), key);
			if (index >= 0) {
				// replace existing entry
				values.set(index, value);
				return this;
			}

			assert(index < 0 && value != null);
			let insertIndex: number =  -index - 1;
			if (size() < getMaxSparseSize() && insertIndex == size()) {
				// stay sparse and add new entry
				keys[insertIndex] = key;
				values.add(value);
				return this;
			}

			let desiredSize: number =  size() >= getMaxSparseSize() ? getMaxSparseSize() * 2 : getMaxSparseSize();
			let space: number =  maxIndex - minIndex + 1;
			// SparseEdgeMap only uses less memory than ArrayEdgeMap up to half the size of the symbol space
			if (desiredSize >= space / 2) {
				let arrayMap: ArrayEdgeMap<T> =  new ArrayEdgeMap<T>(minIndex, maxIndex);
				arrayMap = arrayMap.putAll(this);
				arrayMap.put(key, value);
				return arrayMap;
			}
			else {
				let resized: SparseEdgeMap<T> =  new SparseEdgeMap<T>(this, desiredSize);
				System.arraycopy(resized.keys, insertIndex, resized.keys, insertIndex + 1, size() - insertIndex);
				resized.keys[insertIndex] = key;
				resized.values.add(insertIndex, value);
				return resized;
			}
		}
	}

	@Override
	remove(key: number): SparseEdgeMap<T> {
		synchronized (this) {
			let index: number =  Arrays.binarySearch(keys, 0, size(), key);
			if (index < 0) {
				return this;
			}

			let result: SparseEdgeMap<T> =  new SparseEdgeMap<T>(this, getMaxSparseSize());
			System.arraycopy(result.keys, index + 1, result.keys, index, size() - index - 1);
			result.values.remove(index);
			return result;
		}
	}

	@Override
	clear(): AbstractEdgeMap<T> {
		if (isEmpty()) {
			return this;
		}

		return new EmptyEdgeMap<T>(minIndex, maxIndex);
	}

	@Override
	toMap(): Map<number, T> {
		if (isEmpty()) {
			return Collections.emptyMap();
		}

		synchronized (this) {
			let result: Map<number, T> =  new LinkedHashMap<Integer, T>();
			for (let i = 0; i < size(); i++) {
				result.put(keys[i], values.get(i));
			}

			return result;
		}
	}

	@Override
	entrySet(): Set<Map.Entry<number, T>> {
		return toMap().entrySet();
	}
}
