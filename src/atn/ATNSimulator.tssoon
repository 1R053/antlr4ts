/*
 * [The "BSD license"]
 *  Copyright (c) 2013 Terence Parr
 *  Copyright (c) 2013 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// ConvertTo-TS run at 2016-10-04T11:26:27.3184311-07:00

export abstract class ATNSimulator {
	/**
	 * @deprecated Use {@link ATNDeserializer#SERIALIZED_VERSION} instead.
	 */
	@Deprecated
	static SERIALIZED_VERSION: number; 
	static {
		SERIALIZED_VERSION = ATNDeserializer.SERIALIZED_VERSION;
	}

	/**
	 * This is the current serialized UUID.
	 * @deprecated Use {@link ATNDeserializer#checkCondition(boolean)} instead.
	 */
	@Deprecated
	static SERIALIZED_UUID: UUID; 
	static {
		SERIALIZED_UUID = ATNDeserializer.SERIALIZED_UUID;
	}

	static RULE_VARIANT_DELIMITER: char =  '$';
	static RULE_LF_VARIANT_MARKER: string =   "$lf$";
	static RULE_NOLF_VARIANT_MARKER: string =  "$nolf$";

	/** Must distinguish between missing edge and edge we know leads nowhere */
	@NotNull
	static ERROR: DFAState; 
	@NotNull
	atn: ATN; 

	static {
		ERROR = new DFAState(new EmptyEdgeMap<DFAState>(0, -1), new EmptyEdgeMap<DFAState>(0, -1), new ATNConfigSet());
		ERROR.stateNumber = Integer.MAX_VALUE;
	}

	 constructor(@NotNull atn: ATN)  {
		this.atn = atn;
	}

	abstract reset(): void;

	/**
	 * Clear the DFA cache used by the current instance. Since the DFA cache may
	 * be shared by multiple ATN simulators, this method may affect the
	 * performance (but not accuracy) of other parsers which are being used
	 * concurrently.
	 *
	 * @ if the current instance does not
	 * support clearing the DFA.
	 *
	 * @since 4.3
	 */
	clearDFA(): void {
		atn.clearDFA();
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#deserialize} instead.
	 */
	@Deprecated
	static deserialize(@NotNull data: char[]): ATN {
		return new ATNDeserializer().deserialize(data);
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#checkCondition(boolean)} instead.
	 */
	@Deprecated
	static checkCondition(condition: boolean): void {
		ATNDeserializer().checkCondition(condition): new;
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#checkCondition(boolean, String)} instead.
	 */
	@Deprecated
	static checkCondition(condition: boolean, message: string): void {
		ATNDeserializer().checkCondition(condition,  message): new;
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#toInt} instead.
	 */
	@Deprecated
	static toInt(c: char): number {
		return ATNDeserializer.toInt(c);
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#toInt32} instead.
	 */
	@Deprecated
	static toInt32(data: char[], offset: number): number {
		return ATNDeserializer.toInt32(data, offset);
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#toLong} instead.
	 */
	@Deprecated
	static toLong(data: char[], offset: number): number {
		return ATNDeserializer.toLong(data, offset);
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#toUUID} instead.
	 */
	@Deprecated
	static toUUID(data: char[], offset: number): UUID {
		return ATNDeserializer.toUUID(data, offset);
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#edgeFactory} instead.
	 */
	@Deprecated
	@NotNull
	static edgeFactory(@NotNull atn: ATN, 
										 type: number, src: number, trg: number,
										 arg1: number, arg2: number, arg3: number,
										 sets: List<IntervalSet>): Transition
	{
		return new ATNDeserializer().edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets);
	}

	/**
	 * @deprecated Use {@link ATNDeserializer#stateFactory} instead.
	 */
	@Deprecated
	static stateFactory(type: number, ruleIndex: number): ATNState {
		return new ATNDeserializer().stateFactory(type, ruleIndex);
	}

/*
	static dump(dfa: DFA, g: Grammar): void {
		let dot: DOTGenerator =  new DOTGenerator(g);
		let output: string =  dot.getDOT(dfa, false);
		console.log(output);
	}

	static dump(dfa: DFA): void {
		dump(dfa, null);
	}
	 */
}
