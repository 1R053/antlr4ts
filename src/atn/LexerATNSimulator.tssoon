/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// ConvertTo-TS run at 2016-10-04T11:26:29.1083066-07:00

/** "dup" of ParserInterpreter */
export class LexerATNSimulator extends ATNSimulator {

	static debug: boolean =  false;
	static dfa_debug: boolean =  false;

	static MIN_DFA_EDGE: number =  0;
	static MAX_DFA_EDGE: number =  127; // forces unicode to stay in ATN

	optimize_tail_calls: boolean =  true;

	/** When we hit an accept state in either the DFA or the ATN, we
	 *  have to notify the character stream to start buffering characters
	 *  via {@link IntStream#mark} and record the current state. The current sim state
	 *  includes the current index into the input, the current line,
	 *  and current character position in that line. Note that the Lexer is
	 *  tracking the starting line and characterization of the token. These
	 *  variables track the "state" of the simulator when it hits an accept state.
	 *
	 *  <p>We track these variables separately for the DFA and ATN simulation
	 *  because the DFA simulation often has to fail over to the ATN
	 *  simulation. If the ATN simulation fails, we need the DFA to fall
	 *  back to its previously accepted state, if any. If the ATN succeeds,
	 *  then the ATN does the accept and the DFA simulator that invoked it
	 *  can simply return the predicted token type.</p>
	 */
	protected static class SimState {
		protected index: number =  -1;
		protected line: number =  0;
		protected charPos: number =  -1;
		protected dfaState: DFAState; 

		protected reset(): void {
			index = -1;
			line = 0;
			charPos = -1;
			dfaState = null;
		}
	}

	@Nullable
	protected recog: Lexer; 

	/** The current token's starting index into the character stream.
	 *  Shared across DFA to ATN simulation in case the ATN fails and the
	 *  DFA did not have a previous accept state. In this case, we use the
	 *  ATN-generated exception object.
	 */
	protected startIndex: number =  -1;

	/** line number 1..n within the input */
	protected line: number =  1;

	/** The index of the character relative to the beginning of the line 0..n-1 */
	protected charPositionInLine: number =  0;

	protected mode: number =  Lexer.DEFAULT_MODE;

	/** Used during DFA/ATN exec to record the most recent accept configuration info */
	@NotNull
	protected prevAccept: SimState =  new SimState();

	static match_calls: number =  0;

	 constructor(@NotNull atn: ATN)  {
		this(null, atn);
	}

	 constructor1(@Nullable recog: Lexer, @NotNull atn: ATN)  {
		super(atn);
		this.recog = recog;
	}

	copyState(@NotNull simulator: LexerATNSimulator): void {
		this.charPositionInLine = simulator.charPositionInLine;
		this.line = simulator.line;
		this.mode = simulator.mode;
		this.startIndex = simulator.startIndex;
	}

	match(@NotNull input: CharStream, mode: number): number {
		match_calls++;
		this.mode = mode;
		let mark: number =  input.mark();
		try {
			this.startIndex = input.index();
			this.prevAccept.reset();
			let s0: DFAState =  atn.modeToDFA[mode].s0.get();
			if ( s0==null ) {
				return matchATN(input);
			}
			else {
				return execATN(input, s0);
			}
		}
        finally {
			input.release(mark);
		}
	}

	@Override
	reset(): void {
		prevAccept.reset();
		startIndex = -1;
		line = 1;
		charPositionInLine = 0;
		mode = Lexer.DEFAULT_MODE;
	}

	protected matchATN(@NotNull input: CharStream): number {
		let startState: ATNState =  atn.modeToStartState.get(mode);

		if ( debug ) {
			System.out.format(Locale.getDefault(), "matchATN mode %d start: %s\n", mode, startState);
		}

		let old_mode: number =  mode;

		let s0_closure: ATNConfigSet =  computeStartState(input, startState);
		let suppressEdge: boolean =  s0_closure.hasSemanticContext();
		if (suppressEdge) {
			s0_closure.clearExplicitSemanticContext();
		}

		let next: DFAState =  addDFAState(s0_closure);
		if (!suppressEdge) {
			if (!atn.modeToDFA[mode].s0.compareAndSet(null, next)) {
				next = atn.modeToDFA[mode].s0.get();
			}
		}

		let predict: number =  execATN(input, next);

		if ( debug ) {
			System.out.format(Locale.getDefault(), "DFA after matchATN: %s\n", atn.modeToDFA[old_mode].toLexerString());
		}

		return predict;
	}

	protected execATN(@NotNull input: CharStream, @NotNull ds0: DFAState): number {
		//System.out.println("enter exec index "+input.index()+" from "+ds0.configs);
		if ( debug ) {
			System.out.format(Locale.getDefault(), "start state closure=%s\n", ds0.configs);
		}

		if (ds0.isAcceptState()) {
			// allow zero-length tokens
			captureSimState(prevAccept, input, ds0);
		}

		let t: number =  input.LA(1);
		@NotNull
		let s: DFAState =  ds0; // s is current/from DFA state

		while ( true ) { // while more work
			if ( debug ) {
				System.out.format(Locale.getDefault(), "execATN loop starting closure: %s\n", s.configs);
			}

			// As we move src->trg, src->trg, we keep track of the previous trg to
			// avoid looking up the DFA state again, which is expensive.
			// If the previous target was already part of the DFA, we might
			// be able to avoid doing a reach operation upon t. If s!=null,
			// it means that semantic predicates didn't prevent us from
			// creating a DFA state. Once we know s!=null, we check to see if
			// the DFA state has an edge already for t. If so, we can just reuse
			// it's configuration set; there's no point in re-computing it.
			// This is kind of like doing DFA simulation within the ATN
			// simulation because DFA simulation is really just a way to avoid
			// computing reach/closure sets. Technically, once we know that
			// we have a previously added DFA state, we could jump over to
			// the DFA simulator. But, that would mean popping back and forth
			// a lot and making things more complicated algorithmically.
			// This optimization makes a lot of sense for loops within DFA.
			// A character will take us back to an existing DFA state
			// that already has lots of edges out of it. e.g., .* in comments.
			let target: DFAState =  getExistingTargetState(s, t);
			if (target == null) {
				target = computeTargetState(input, s, t);
			}

			if (target == ERROR) {
				break;
			}

			// If this is a consumable input element, make sure to consume before
			// capturing the accept state so the input index, line, and char
			// position accurately reflect the state of the interpreter at the
			// end of the token.
			if (t != IntStream.EOF) {
				consume(input);
			}

			if (target.isAcceptState()) {
				captureSimState(prevAccept, input, target);
				if (t == IntStream.EOF) {
					break;
				}
			}

			t = input.LA(1);
			s = target; // flip; current DFA target becomes new src/from state
		}

		return failOrAccept(prevAccept, input, s.configs, t);
	}

	/**
	 * Get an existing target state for an edge in the DFA. If the target state
	 * for the edge has not yet been computed or is otherwise not available,
	 * this method returns {@code null}.
	 *
	 * @param s The current DFA state
	 * @param t The next input symbol
	 * @return The existing target DFA state for the given input symbol
	 * {@code t}, or {@code null} if the target state for this edge is not
	 * already cached
	 */
	@Nullable
	protected getExistingTargetState(@NotNull s: DFAState, t: number): DFAState {
		let target: DFAState =  s.getTarget(t);
		if (debug && target != null) {
			console.log("reuse state "+s.stateNumber+
							   " edge to "+target.stateNumber);
		}

		return target;
	}

	/**
	 * Compute a target state for an edge in the DFA, and attempt to add the
	 * computed state and corresponding edge to the DFA.
	 *
	 * @param input The input stream
	 * @param s The current DFA state
	 * @param t The next input symbol
	 *
	 * @return The computed target DFA state for the given input symbol
	 * {@code t}. If {@code t} does not lead to a valid DFA state, this method
	 * returns {@link #ERROR}.
	 */
	@NotNull
	protected computeTargetState(@NotNull input: CharStream, @NotNull s: DFAState, t: number): DFAState {
		let reach: ATNConfigSet =  new OrderedATNConfigSet();

		// if we don't find an existing DFA state
		// Fill reach starting from closure, following t transitions
		getReachableConfigSet(input, s.configs, reach, t);

		if ( reach.isEmpty() ) { // we got nowhere on t from s
			if (!reach.hasSemanticContext()) {
				// we got nowhere on t, don't throw out this knowledge; it'd
				// cause a failover from DFA later.
				addDFAEdge(s, t, ERROR);
			}

			// stop when we can't match any more char
			return ERROR;
		}

		// Add an edge from s to target DFA found/created for reach
		return addDFAEdge(s, t, reach);
	}

	protected failOrAccept(prevAccept: SimState, input: CharStream, 
							   reach: ATNConfigSet, t: number): number
	{
		if (prevAccept.dfaState != null) {
			let lexerActionExecutor: LexerActionExecutor =  prevAccept.dfaState.getLexerActionExecutor();
			accept(input, lexerActionExecutor, startIndex,
				prevAccept.index, prevAccept.line, prevAccept.charPos);
			return prevAccept.dfaState.getPrediction();
		}
		else {
			// if no accept and EOF is first char, return EOF
			if ( t==IntStream.EOF && input.index()==startIndex ) {
				return Token.EOF;
			}

			throw new LexerNoViableAltException(recog, input, startIndex, reach);
		}
	}

	/** Given a starting configuration set, figure out all ATN configurations
	 *  we can reach upon input {@code t}. Parameter {@code reach} is a return
	 *  parameter.
	 */
	protected getReachableConfigSet(@NotNull input: CharStream, @NotNull closure: ATNConfigSet, @NotNull reach: ATNConfigSet, t: number): void {
		// this is used to skip processing for configs which have a lower priority
		// than a config that already reached an accept state for the same rule
		let skipAlt: number =  ATN.INVALID_ALT_NUMBER;
		for (let c of closure) {
			let currentAltReachedAcceptState: boolean =  c.getAlt() == skipAlt;
			if (currentAltReachedAcceptState && c.hasPassedThroughNonGreedyDecision()) {
				continue;
			}

			if ( debug ) {
				System.out.format(Locale.getDefault(), "testing %s at %s\n", getTokenName(t), c.toString(recog, true));
			}

			let n: number =  c.getState().getNumberOfOptimizedTransitions();
			for (let ti=0; ti<n; ti++) {               // for each optimized transition
				let trans: Transition =  c.getState().getOptimizedTransition(ti);
				let target: ATNState =  getReachableTarget(trans, t);
				if ( target!=null ) {
					let lexerActionExecutor: LexerActionExecutor =  c.getLexerActionExecutor();
					if (lexerActionExecutor != null) {
						lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index() - startIndex);
					}

					let treatEofAsEpsilon: boolean =  t == CharStream.EOF;
					if (closure(input, c.transform(target, lexerActionExecutor, true), reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
						// any remaining configs for this alt have a lower priority than
						// the one that just reached an accept state.
						skipAlt = c.getAlt();
						break;
					}
				}
			}
		}
	}

	protected accept(@NotNull input: CharStream, lexerActionExecutor: LexerActionExecutor, 
						  startIndex: number, index: number, line: number, charPos: number): void
	{
		if ( debug ) {
			System.out.format(Locale.getDefault(), "ACTION %s\n", lexerActionExecutor);
		}

		// seek to after last char in token
		input.seek(index);
		this.line = line;
		this.charPositionInLine = charPos;

		if (lexerActionExecutor != null && recog != null) {
			lexerActionExecutor.execute(recog, input, startIndex);
		}
	}

	@Nullable
	protected getReachableTarget(trans: Transition, t: number): ATNState {
		if (trans.matches(t, Character.MIN_VALUE, Character.MAX_VALUE)) {
			return trans.target;
		}

		return null;
	}

	@NotNull
	protected computeStartState(@NotNull input: CharStream, 
											 @NotNull p: ATNState): ATNConfigSet
	{
		let initialContext: PredictionContext =  PredictionContext.EMPTY_FULL;
		let configs: ATNConfigSet =  new OrderedATNConfigSet();
		for (let i=0; i<p.getNumberOfTransitions(); i++) {
			let target: ATNState =  p.transition(i).target;
			let c: ATNConfig =  ATNConfig.create(target, i+1, initialContext);
			closure(input, c, configs, false, false, false);
		}
		return configs;
	}

	/**
	 * Since the alternatives within any lexer decision are ordered by
	 * preference, this method stops pursuing the closure as soon as an accept
	 * state is reached. After the first accept state is reached by depth-first
	 * search from {@code config}, all other (potentially reachable) states for
	 * this rule would have a lower priority.
	 *
	 * @return {@code true} if an accept state is reached, otherwise
	 * {@code false}.
	 */
	protected closure(@NotNull input: CharStream, @NotNull config: ATNConfig, @NotNull configs: ATNConfigSet, currentAltReachedAcceptState: boolean, speculative: boolean, treatEofAsEpsilon: boolean): boolean {
		if ( debug ) {
			console.log("closure("+config.toString(recog, true)+")");
		}

		if ( config.getState() instanceof RuleStopState ) {
			if ( debug ) {
				if ( recog!=null ) {
					System.out.format(Locale.getDefault(), "closure at %s rule stop %s\n", recog.getRuleNames()[config.getState().ruleIndex], config);
				}
				else {
					System.out.format(Locale.getDefault(), "closure at rule stop %s\n", config);
				}
			}

			let context: PredictionContext =  config.getContext();
			if ( context.isEmpty() ) {
				configs.add(config);
				return true;
			}
			else if ( context.hasEmpty() ) {
				configs.add(config.transform(config.getState(), PredictionContext.EMPTY_FULL, true));
				currentAltReachedAcceptState = true;
			}

			for (let i = 0; i < context.size(); i++) {
				let returnStateNumber: number =  context.getReturnState(i);
				if (returnStateNumber == PredictionContext.EMPTY_FULL_STATE_KEY) {
					continue;
				}

				let newContext: PredictionContext =  context.getParent(i); // "pop" return state
				let returnState: ATNState =  atn.states.get(returnStateNumber);
				let c: ATNConfig =  config.transform(returnState, newContext, false);
				currentAltReachedAcceptState = closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
			}

			return currentAltReachedAcceptState;
		}

		// optimization
		if ( !config.getState().onlyHasEpsilonTransitions() )	{
			if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision()) {
				configs.add(config);
			}
		}

		let p: ATNState =  config.getState();
		for (let i=0; i<p.getNumberOfOptimizedTransitions(); i++) {
			let t: Transition =  p.getOptimizedTransition(i);
			let c: ATNConfig =  getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon);
			if ( c!=null ) {
				currentAltReachedAcceptState = closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
			}
		}

		return currentAltReachedAcceptState;
	}

	// side-effect: can alter configs.hasSemanticContext
	@Nullable
	protected getEpsilonTarget(@NotNull input: CharStream, 
									  @NotNull config: ATNConfig,
									  @NotNull t: Transition,
									  @NotNull configs: ATNConfigSet,
									  speculative: boolean,
									  treatEofAsEpsilon: boolean): ATNConfig
	{
		let c: ATNConfig; 

		switch (t.getSerializationType()) {
		case Transition.RULE:
			let ruleTransition: RuleTransition =  (RuleTransition)t;
			if (optimize_tail_calls && ruleTransition.optimizedTailCall && !config.getContext().hasEmpty()) {
				c = config.transform(t.target, true);
			}
			else {
				let newContext: PredictionContext =  config.getContext().getChild(ruleTransition.followState.stateNumber);
				c = config.transform(t.target, newContext, true);
			}

			break;

		case Transition.PRECEDENCE:
			throw new UnsupportedOperationException("Precedence predicates are not supported in lexers.");

		case Transition.PREDICATE:
			/*  Track traversing semantic predicates. If we traverse,
			    we cannot add a DFA state for this "reach" computation
				because the DFA would not test the predicate again in the
				future. Rather than creating collections of semantic predicates
				like v3 and testing them on prediction, v4 will test them on the
				fly all the time using the ATN not the DFA. This is slower but
				semantically it's not used that often. One of the key elements to
				this predicate mechanism is not adding DFA states that see
				predicates immediately afterwards in the ATN. For example,

				a : ID {p1}? | ID {p2}? ;

				should create the start state for rule 'a' (to save start state
				competition), but should not create target of ID state. The
				collection of ATN states the following ID references includes
				states reached by traversing predicates. Since this is when we
				test them, we cannot cash the DFA state target of ID.
			*/
			let pt: PredicateTransition =  (PredicateTransition)t;
			if ( debug ) {
				console.log("EVAL rule "+pt.ruleIndex+":"+pt.predIndex);
			}
			configs.markExplicitSemanticContext();
			if (evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {
				c = config.transform(t.target, true);
			}
			else {
				c = null;
			}
			
			break;
			
		case Transition.ACTION:
			if (config.getContext().hasEmpty()) {
				// execute actions anywhere in the start rule for a token.
				//
				// TODO: if the entry rule is invoked recursively, some
				// actions may be executed during the recursive call. The
				// problem can appear when hasEmpty() is true but
				// isEmpty() is false. In this case, the config needs to be
				// split into two contexts - one with just the empty path
				// and another with everything but the empty path.
				// Unfortunately, the current algorithm does not allow
				// getEpsilonTarget to return two configurations, so
				// additional modifications are needed before we can support
				// the split operation.
				let lexerActionExecutor: LexerActionExecutor =  LexerActionExecutor.append(config.getLexerActionExecutor(), atn.lexerActions[((ActionTransition)t).actionIndex]);
				c = config.transform(t.target, lexerActionExecutor, true);
				break;
			}
			else {
				// ignore actions in referenced rules
				c = config.transform(t.target, true);
				break;
			}

		case Transition.EPSILON:
			c = config.transform(t.target, true);
			break;

		case Transition.ATOM:
		case Transition.RANGE:
		case Transition.SET:
			if (treatEofAsEpsilon) {
				if (t.matches(CharStream.EOF, Character.MIN_VALUE, Character.MAX_VALUE)) {
					c = config.transform(t.target, false);
					break;
				}
			}

			c = null;
			break;

		default:
			c = null;
			break;
		}

		return c;
	}

	/**
	 * Evaluate a predicate specified in the lexer.
	 *
	 * <p>If {@code speculative} is {@code true}, this method was called before
	 * {@link #consume} for the matched character. This method should call
	 * {@link #consume} before evaluating the predicate to ensure position
	 * sensitive values, including {@link Lexer#getText}, {@link Lexer#getLine},
	 * and {@link Lexer#getCharPositionInLine}, properly reflect the current
	 * lexer state. This method should restore {@code input} and the simulator
	 * to the original state before returning (i.e. undo the actions made by the
	 * call to {@link #consume}.</p>
	 *
	 * @param input The input stream.
	 * @param ruleIndex The rule containing the predicate.
	 * @param predIndex The index of the predicate within the rule.
	 * @param speculative {@code true} if the current index in {@code input} is
	 * one character before the predicate's location.
	 *
	 * @return {@code true} if the specified predicate evaluates to
	 * {@code true}.
	 */
	protected evaluatePredicate(@NotNull input: CharStream, ruleIndex: number, predIndex: number, speculative: boolean): boolean {
		// assume true if no recognizer was provided
		if (recog == null) {
			return true;
		}

		if (!speculative) {
			return recog.sempred(null, ruleIndex, predIndex);
		}

		let savedCharPositionInLine: number =  charPositionInLine;
		let savedLine: number =  line;
		let index: number =  input.index();
		let marker: number =  input.mark();
		try {
			consume(input);
			return recog.sempred(null, ruleIndex, predIndex);
		}
		finally {
			charPositionInLine = savedCharPositionInLine;
			line = savedLine;
			input.seek(index);
			input.release(marker);
		}
	}

	protected captureSimState(@NotNull settings: SimState, 
								   @NotNull input: CharStream,
								   @NotNull dfaState: DFAState): void
	{
		settings.index = input.index();
		settings.line = line;
		settings.charPos = charPositionInLine;
		settings.dfaState = dfaState;
	}

	@NotNull
	protected addDFAEdge(@NotNull from: DFAState, 
								  t: number,
								  @NotNull q: ATNConfigSet): DFAState
	{
		/* leading to this call, ATNConfigSet.hasSemanticContext is used as a
		 * marker indicating dynamic predicate evaluation makes this edge
		 * dependent on the specific input sequence, so the static edge in the
		 * DFA should be omitted. The target DFAState is still created since
		 * execATN has the ability to resynchronize with the DFA state cache
		 * following the predicate evaluation step.
		 *
		 * TJP notes: next time through the DFA, we see a pred again and eval.
		 * If that gets us to a previously created (but dangling) DFA
		 * state, we can continue in pure DFA mode from there.
		 */
		let suppressEdge: boolean =  q.hasSemanticContext();
		if (suppressEdge) {
			q.clearExplicitSemanticContext();
		}

		@NotNull
		let to: DFAState =  addDFAState(q);

		if (suppressEdge) {
			return to;
		}

		addDFAEdge(from, t, to);
		return to;
	}

	protected addDFAEdge(@NotNull p: DFAState, t: number, @NotNull q: DFAState): void {
		if ( debug ) {
			console.log("EDGE "+p+" -> "+q+" upon "+((char)t));
		}

		if ( p!=null ) {
			p.setTarget(t, q);
		}
	}

	/** Add a new DFA state if there isn't one with this set of
		configurations already. This method also detects the first
		configuration containing an ATN rule stop state. Later, when
		traversing the DFA, we will know which rule to accept.
	 */
	@NotNull
	protected addDFAState(@NotNull configs: ATNConfigSet): DFAState {
		/* the lexer evaluates predicates on-the-fly; by this point configs
		 * should not contain any configurations with unevaluated predicates.
		 */
		assert(!configs.hasSemanticContext());

		let proposed: DFAState =  new DFAState(atn.modeToDFA[mode], configs);
		let existing: DFAState =  atn.modeToDFA[mode].states.get(proposed);
		if ( existing!=null ) return existing;

		configs.optimizeConfigs(this);
		let newState: DFAState =  new DFAState(atn.modeToDFA[mode], configs.clone(true));

		let firstConfigWithRuleStopState: ATNConfig =  null;
		for (let c of configs) {
			if ( c.getState() instanceof RuleStopState )	{
				firstConfigWithRuleStopState = c;
				break;
			}
		}

		if ( firstConfigWithRuleStopState!=null ) {
			let prediction: number =  atn.ruleToTokenType[firstConfigWithRuleStopState.getState().ruleIndex];
			let lexerActionExecutor: LexerActionExecutor =  firstConfigWithRuleStopState.getLexerActionExecutor();
			newState.setAcceptState(new AcceptStateInfo(prediction, lexerActionExecutor));
		}

		return atn.modeToDFA[mode].addState(newState);
	}

	@NotNull
	getDFA(mode: number): DFA {
		return atn.modeToDFA[mode];
	}

	/** Get the text matched so far for the current token.
	 */
	@NotNull
	getText(@NotNull input: CharStream): string {
		// index is first lookahead char, don't include.
		return input.getText(Interval.of(startIndex, input.index()-1));
	}

	getLine(): number {
		return line;
	}

	setLine(line: number): void {
		this.line = line;
	}

	getCharPositionInLine(): number {
		return charPositionInLine;
	}

	setCharPositionInLine(charPositionInLine: number): void {
		this.charPositionInLine = charPositionInLine;
	}

	consume(@NotNull input: CharStream): void {
		let curChar: number =  input.LA(1);
		if ( curChar=='\n' ) {
			line++;
			charPositionInLine=0;
		} else {
			charPositionInLine++;
		}
		input.consume();
	}

	@NotNull
	getTokenName(t: number): string {
		if ( t==-1 ) return "EOF";
		//if ( atn.g!=null ) return atn.g.getTokenDisplayName(t);
		return "'"+(char)t+"'";
	}
}
