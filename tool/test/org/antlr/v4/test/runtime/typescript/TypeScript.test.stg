// Copyright 2016 The ANTLR Project. All rights reserved.
// Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.

TestFile(file) ::= <<
package org.antlr.v4.test.runtime;

import org.antlr.v4.test.runtime.typescript.BaseTest;
import org.junit.Ignore;
import org.junit.Test;

import static org.junit.Assert.*;

<if(file.Options.("ImportErrorQueue"))>
import org.antlr.v4.test.runtime.typescript.ErrorQueue;
<endif>
<if(file.Options.("ImportGrammar"))>
import org.antlr.v4.tool.Grammar;
<endif>

public class Test<file.name> extends BaseTest {

	<file.tests:{test | <test>}; separator="\n", wrap, anchor>

}<\n>
>>

LexerTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(tmpdir);

<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
	writeFile(tmpdir, "<grammar>.g4", slave_<grammar>);
	}; separator="\n">
<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>

<if(test.AfterGrammar)>
	<test.AfterGrammar>
<endif>
	this.input =<writeStringLiteral(test.Input)>;
	this.expectedOutput = <writeStringLiteral(test.Output)>;
	this.expectedErrors = <writeStringLiteral(test.Errors)>;
	generateLexerTest("<grammar>.g4", grammar, "<grammar><if(test.Options.("CombinedGrammar"))>Lexer<endif>", <writeBoolean(test.Options.("ShowDFA"))>);
	}>
}

>>

CompositeLexerTestMethod(test) ::= <<
<LexerTestMethod(test)>
>>

ParserTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(tmpdir);

<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
<if(test.Options.("SlaveIsLexer"))>
	rawGenerateAndBuildRecognizer("<grammar>.g4", slave_<grammar>, null, "<grammar>");
<else>
	writeFile(tmpdir, "<grammar>.g4", slave_<grammar>);
<endif>
	}; separator="\n">
<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>

	<test.AfterGrammar>

	this.input =<writeStringLiteral(test.Input)>;
	this.expectedOutput = <writeStringLiteral(test.Output)>;
	this.expectedErrors = <writeStringLiteral(test.Errors)>;
	generateParserTest("<grammar>.g4", grammar, "<grammar>Parser", "<grammar>Lexer", "<test.Rule>", <writeBoolean(test.Options.("Debug"))>);
	}>
}

>>

CompositeParserTestMethod(test) ::= <<
<ParserTestMethod(test)>
>>

AbstractParserTestMethod(test) ::= <<
String test<test.name>(String input) throws Exception {
	String grammar = <test.grammar.lines:{ line | "<line>};separator="\\n\" +\n", wrap, anchor>";
	return generateParserTest("<test.grammar.grammarName>.g4", grammar, "<test.grammar.grammarName>Parser", "<test.grammar.grammarName>Lexer", "<test.startRule>", <test.debug>);
}

>>

ConcreteParserTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	String found = test<test.baseName>("<test.input>");
	assertEquals("<test.expectedOutput>", found);
	<if(test.expectedErrors)>
	assertEquals("<test.expectedErrors>", this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
}

>>

testAnnotations(test) ::= <%
@Test
<if(test.Options.("Timeout"))>
(timeout = <test.Options.("Timeout")>)
<endif>
<if(test.Options.("Ignore"))>
<\n>@Ignore(<writeStringLiteral(test.Options.("Ignore"))>)
<elseif(IgnoredTests.(({<file.name>.<test.name>})))>
<\n>@Ignore(<writeStringLiteral(IgnoredTests.(({<file.name>.<test.name>})))>)
<endif>
%>

buildStringLiteral(text, variable) ::= <<
StringBuilder <variable>Builder = new StringBuilder(<strlen.(text)>);
<lines.(text):{line|<variable>Builder.append("<escape.(line)>");}; separator="\n">
String <variable> = <variable>Builder.toString();
>>

writeStringLiteral(text) ::= <%
<if(isEmpty.(text))>
""
<else>
<writeLines(lines.(text))>
<endif>
%>

writeLines(textLines) ::= <%
<if(rest(textLines))>
<textLines:{line|
<\n>		"<escape.(line)>}; separator="\" +">"
<else>
"<escape.(first(textLines))>"
<endif>
%>

string(text) ::= <<
"<escape.(text)>"
>>

writeBoolean(o) ::= "<if(o && !isEmpty.(o))>true<else>false<endif>"

writeln(s) ::= <<console.log(<s>);>>
write(s) ::= <<process.stdout.write(String(<s>));>>
writeList(s) ::= <<console.log(<s; separator="+">);>>

False() ::= "false"

True() ::= "true"

Not(v) ::= "!<v>"

Assert(s) ::= <<if (!(<s>)) throw new Error("InvalidOperationException: Assertion failed");>>

Cast(t,v) ::= "(<v> as <t>)"

Append(a,b) ::= "<a> + <b>"

Concat(a,b) ::= "<a><b>"

DeclareLocal(s,v) ::= "let <s> = <v>;"

AssertIsList(v) ::= "let __ttt__: Array\<any> = <v>;" // just use static type system

AssignLocal(s,v) ::= "<s> = <v>;"

InitIntMember(n,v) ::= <%<n>: number = <v>;%>
InitLocalIntMember(n, v) ::= <%let <n>: number = <v>;%>

InitBooleanMember(n,v) ::= <%<n>: boolean = <v>;%>

GetMember(n) ::= <%this.<n>%>

SetMember(n,v) ::= <%this.<n> = <v>;%>

AddMember(n,v) ::= <%this.<n> += <v>;%>

PlusMember(v,n) ::= <%<v> + this.<n>%>

MemberEquals(n,v) ::= <%this.<n> == <v>%>

ModMemberEquals(n,m,v) ::= <%this.<n> % <m> == <v>%>

ModMemberNotEquals(n,m,v) ::= <%this.<n> % <m> != <v>%>

DumpDFA() ::= "this.dumpDFA();"

Pass() ::= ""

StringList() ::= "string[]"

BuildParseTrees() ::= "this.setBuildParseTree(true);"

BailErrorStrategy() ::= <%this.setErrorHandler(new BailErrorStrategy());%>

ToStringTree(s) ::= <%<s>.toStringTree(this)%>

Column() ::= "this.getCharPositionInLine()"

Text() ::= "this.getText()"

ValEquals(a,b) ::= <%<a>==<b>%>

TextEquals(a) ::= <%this.getText() === "<a>"%>

PlusText(a) ::= <%"<a>" + this.getText()%>

InputText() ::= "this._input.getText()"

LTEquals(i, v) ::= <%this._input.LT(<i>).getText() === <v>%>

LANotEquals(i, v) ::= <%this._input.LA(<i>)!==<v>%>

TokenStartColumnEquals(i) ::= <%this._tokenStartCharPositionInLine==<i>%>

ImportListener(X) ::= ""

ImportPredictionMode() ::= <<
@beforeParser {
import { PredictionMode } from 'antlr4ts/atn/PredictionMode';
}
>>

ImportBailErrorStrategy() ::= <<
@beforeParser {
import { BailErrorStrategy } from 'antlr4ts/BailErrorStrategy';
}
>>

GetExpectedTokenNames() ::= "this.getExpectedTokens().toStringVocabulary(this.getVocabulary())"

RuleInvocationStack() ::= "'[' + Utils.join(this.getRuleInvocationStack(), ', ') + ']'"

FULL_CONTEXT_DFA() ::= "this.getInterpreter().enable_global_context_dfa = true;"
LL_EXACT_AMBIG_DETECTION() ::= <<this.getInterpreter().setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);>>

ParserToken(parser, token) ::= <%<parser>.<token>%>

Production(p) ::= <%<p>%>

Result(r) ::= <%<r>%>

ParserPropertyMember() ::= <<
@members {
Property(): boolean {
  return true;
}
}
>>

ParserPropertyCall(p, call) ::= "<p>.<call>"

PositionAdjustingLexer() ::= <<
@members {
nextToken(): Token {
	if (!(this._interp instanceof PositionAdjustingLexerATNSimulator)) {
		this._interp = new PositionAdjustingLexerATNSimulator(PositionAdjustingLexer._ATN, this);
	}

	return super.nextToken();
}

emit(): Token {
	switch (this._type) {
	case PositionAdjustingLexer.TOKENS:
		this.handleAcceptPositionForKeyword("tokens");
		break;

	case PositionAdjustingLexer.LABEL:
		this.handleAcceptPositionForIdentifier();
		break;

	default:
		break;
	}

	return super.emit();
}

private handleAcceptPositionForIdentifier(): boolean {
	let tokenText = this.getText();
	let identifierLength = 0;
	while (identifierLength \< tokenText.length && PositionAdjustingLexer.isIdentifierChar(tokenText[identifierLength])) {
		identifierLength++;
	}

	if (this.getInputStream().index() > this._tokenStartCharIndex + identifierLength) {
		let offset = identifierLength - 1;
		this.getInterpreter().resetAcceptPosition(this._input, this._tokenStartCharIndex + offset, this._tokenStartLine, this._tokenStartCharPositionInLine + offset);
		return true;
	}

	return false;
}

private handleAcceptPositionForKeyword(keyword: string): boolean {
	if (this.getInputStream().index() > this._tokenStartCharIndex + keyword.length) {
		let offset = keyword.length - 1;
		this.getInterpreter().resetAcceptPosition(this._input, this._tokenStartCharIndex + offset, this._tokenStartLine, this._tokenStartCharPositionInLine + offset);
		return true;
	}

	return false;
}

getInterpreter(): PositionAdjustingLexerATNSimulator {
	return super.getInterpreter() as PositionAdjustingLexerATNSimulator;
}

private static isIdentifierChar(c: string): boolean {
	return /^[a-zA-Z0-9_]$/.test(c);
}
}

@beforeLexer {
import { Token } from 'antlr4ts';
}

@afterLexer {
export class PositionAdjustingLexerATNSimulator extends LexerATNSimulator {

	constructor(atn: ATN, recog: Lexer) {
		super(atn, recog);
	}

	resetAcceptPosition(input: CharStream, index: number, line: number, charPositionInLine: number): void {
		input.seek(index);
		this.line = line;
		this.charPositionInLine = charPositionInLine;
		this.consume(input);
	}

}
}
>>

BasicListener(X) ::= <<
@parser::afterParser {
export class LeafListener implements TListener {
	visitTerminal(node: TerminalNode): void {
		console.log(node.getSymbol().getText());
	}
}
}
>>

WalkListener(s) ::= <<
ParseTreeWalker.Default.Walk(new LeafListener(), <s>);
>>

TreeNodeWithAltNumField(X) ::= <<
@parser::beforeParser {
import { ParserRuleContext as PRC } from 'antlr4ts/ParserRuleContext';

export class MyRuleNode extends PRC {
	altNum: number;
	constructor(parent: PRC, invokingStateNumber: number) {
		super(parent, invokingStateNumber);
	}

	getAltNumber(): number { return this.altNum; }
	setAltNumber(value: number) { this.altNum = value; }
}
}
>>

TokenGetterListener(X) ::= <<
@parser::afterParser {
export class LeafListener implements TListener {
	exitA(ctx: TParser.AContext): void {
		if (ctx.getChildCount() === 2 && ctx.INT().length === 2) {
			console.log("{0} {1} [{2}, {3}]",ctx.INT(0).getSymbol().getText(),
				ctx.INT(1).getSymbol().getText(), ctx.INT()[0], ctx.INT()[1]);
		} else {
			console.log(ctx.ID().getSymbol());
		}
	}
}
}
>>

RuleGetterListener(X) ::= <<
@parser::afterParser {
export class LeafListener implements TListener {
	exitA(ctx: TParser.AContext): void {
		if (ctx.getChildCount() === 2) {
			console.log("{0} {1} {2}",ctx.b(0).getStart().getText(),
				ctx.b(1).getStart().getText(),ctx.b()[0].getStart().getText());
		} else {
			console.log(ctx.b(0).getStart().getText());
		}
	}
}
}
>>

LRListener(X) ::= <<
@parser::afterParser {
export class LeafListener implements TListener {
	exitE(ctx: TParser.EContext): void {
		if (ctx.getChildCount() === 3) {
			console.log("{0} {1} {2}\n",ctx.e(0).getStart().getText(),
				ctx.e(1).getStart().getText(), ctx.e()[0].getStart().getText());
		} else {
			console.log(ctx.INT().getSymbol().getText());
		}
	}
}
}
>>

LRWithLabelsListener(X) ::= <<
@parser::afterParser {
export class LeafListener implements TListener {
	exitCall(ctx: TParser.CallContext): void {
		console.log("{0} {1}",ctx.e().getStart().getText(),ctx.eList());
	}
	exitInt(ctx: TParser.IntContext): void {
		console.log(ctx.INT().getSymbol().getText());
	}
}
}
>>

ImportVisitor(X) ::= ""
BasicVisitor(X) ::= ""
WalkVisitor(s) ::= ""
LRWithLabelsVisitor(X) ::= ""
RuleGetterVisitor(X) ::= ""
LRVisitor(x) ::= ""
TokenGetterVisitor(x) ::= ""

DeclareContextListGettersFunction() ::= <<
foo(s: SContext): void {
	let a: AContext[] = s.a();
	let b: BContext[] = s.b();
}
>>

Declare_foo() ::= <<
	foo(): void {console.log("foo");}
>>

Invoke_foo() ::= "this.foo();"

Declare_pred() ::= <<pred(v: boolean): boolean {
	console.log("eval="+v.toString().toLowerCase());
	return v;
}
>>

Invoke_pred(v) ::= <<this.pred(<v>)>>

ParserTokenType(t) ::= "Parser.<t>"
ContextRuleFunction(ctx, rule) ::= "<ctx>.<rule>"
ContextLabel(ctx, label) ::= "<ctx>._<label>"
StringType() ::= "string | undefined"
IntType() ::= "number"
ContextMember(ctx, subctx, member) ::= "<ctx>.<subctx>.<member>"

IgnoredTests ::= [
	// Skipped due to limitations in the testing framework
	"CompositeParsers.DelegatorInvokesDelegateRuleWithArgs": "Test does not support replacing the 'int' type.",

	"SemPredEvalParser.AtomWithClosureInTranslatedLRRule": "Test does not support replacing the 'int' type.",
	"SemPredEvalParser.DepedentPredsInGlobalFOLLOW": "Test does not support replacing the 'int' type.",
	"SemPredEvalParser.DependentPredNotInOuterCtxShouldBeIgnored": "Test does not support replacing the 'int' type.",
	"SemPredEvalParser.PredicateDependentOnArg": "Test does not support replacing the 'int' type.",
	"SemPredEvalParser.PredicateDependentOnArg2": "Test does not support replacing the 'int' type.",

	"FullContextParsing.ExprAmbiguity_1": "Test does not support replacing the 'int' type.",
	"FullContextParsing.ExprAmbiguity_2": "Test does not support replacing the 'int' type.",

	"Listeners.Basic": "Test does not support using '@beforeParser' instead of '@members'.",
	"Listeners.LR": "Test does not support using '@beforeParser' instead of '@members'.",
	"Listeners.LRWithLabels": "Test does not support using '@beforeParser' instead of '@members'.",
	"Listeners.RuleGetters_1": "Test does not support using '@beforeParser' instead of '@members'.",
	"Listeners.RuleGetters_2": "Test does not support using '@beforeParser' instead of '@members'.",
	"Listeners.TokenGetters_1": "Test does not support using '@beforeParser' instead of '@members'.",
	"Listeners.TokenGetters_2": "Test does not support using '@beforeParser' instead of '@members'.",

	// Skipped due to limitations in the TypeScript target
	"Visitors.Basic": "Test not implemented by this target.",
	"Visitors.LR": "Test not implemented by this target.",
	"Visitors.LRWithLabels": "Test not implemented by this target.",
	"Visitors.RuleGetters_1": "Test not implemented by this target.",
	"Visitors.RuleGetters_2": "Test not implemented by this target.",
	"Visitors.TokenGetters_1": "Test not implemented by this target.",
	"Visitors.TokenGetters_2": "Test not implemented by this target.",

	"Performance.DropLoopEntryBranchInLRRule_4": "Need a timeout of 15000ms for this to pass."

	default: false
]

isEmpty ::= [
	"": true,
	default: false
]
