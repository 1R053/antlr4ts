/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// ConvertTo-TS run at 2016-10-04T11:27:02.1495867-07:00

export class ParserInterpreterForTesting {
	public static class DummyParser extends Parser {
		atn: ATN; 

		g: Grammar; 
		public DummyParser(Grammar g, ATN atn, TokenStream input) {
			super(input);
			this.g = g;
			this.atn = atn;
		}

		@Override
		getGrammarFileName(): string {
			throw new UnsupportedOperationException("not implemented");
		}

		@Override
		getRuleNames(): string[] {
			return g.rules.keySet().toArray(new String[g.rules.size()]);
		}

		@Override
		@Deprecated
		getTokenNames(): string[] {
			return g.getTokenNames();
		}

		@Override
		getATN(): ATN {
			return atn;
		}
	}

	protected g: Grammar; 
	protected atnSimulator: ParserATNSimulator; 
	protected input: TokenStream; 

	 constructor(@NotNull g: Grammar)  {
		this.g = g;
	}

	 constructor1(@NotNull g: Grammar, @NotNull input: TokenStream)  {
		let antlr: Tool =  new Tool();
		antlr.process(g,false);
		atnSimulator = new ParserATNSimulator(new DummyParser(g, g.atn, input), g.atn);
	}

	adaptivePredict(@NotNull input: TokenStream, decision: number, 
							   @Nullable outerContext: ParserRuleContext): number
	{
		return atnSimulator.adaptivePredict(input, decision, outerContext);
	}

	matchATN(@NotNull input: TokenStream, 
						@NotNull startState: ATNState): number
	{
		if (startState.getNumberOfTransitions() == 1) {
			return 1;
		}
		else if (startState instanceof DecisionState) {
			return atnSimulator.adaptivePredict(input, ((DecisionState)startState).decision, null, false);
		}
		else if (startState.getNumberOfTransitions() > 0) {
			return 1;
		}
		else {
			return -1;
		}
	}

	getATNSimulator(): ParserATNSimulator {
		return atnSimulator;
	}

}
