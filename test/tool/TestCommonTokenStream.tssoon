/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// ConvertTo-TS run at 2016-10-04T11:27:06.7679390-07:00

// import org.junit.Test;

// import static org.junit.Assert.*;

export class TestCommonTokenStream extends TestBufferedTokenStream {

	@Override
	protected createTokenStream(src: TokenSource): TokenStream {
		return new CommonTokenStream(src);
	}

	@Test testOffChannel(): void {
        let lexer: TokenSource =  // simulate input " x =34  ;\n"
            TokenSource(): new {
                let i: number =  0;
                @SuppressWarnings("serial")
                let tokens: WritableToken[] =  {
                    CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}},
                    CommonToken(1, "x"): new,
                    CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}},
                    CommonToken(1, "="): new,
                    CommonToken(1, "34"): new,
                    CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}},
                    CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}},
                    CommonToken(1, ";"): new,
                    CommonToken(1, "\n"): new {{channel = Lexer.HIDDEN;}},
                    CommonToken(Token.EOF, ""): new
                };
                @Override
                nextToken(): Token {
                    return tokens[i++];
                }
                @Override
                getSourceName(): string { return "test"; }
				@Override
				getCharPositionInLine(): number {
					return 0;
				}
				@Override
				getLine(): number {
					return 0;
				}
				@Override
				getInputStream(): CharStream {
					return null;
				}

				@Override
				getTokenFactory(): TokenFactory {
					return CommonTokenFactory.DEFAULT;
				}

				@Override
				setTokenFactory(factory: TokenFactory): void {
				}
			};

        let tokens: CommonTokenStream =  new CommonTokenStream(lexer);

        assertEquals("x", tokens.LT(1).getText()); // must skip first off channel token
        tokens.consume();
        assertEquals("=", tokens.LT(1).getText());
        assertEquals("x", tokens.LT(-1).getText());

        tokens.consume();
        assertEquals("34", tokens.LT(1).getText());
        assertEquals("=", tokens.LT(-1).getText());

        tokens.consume();
        assertEquals(";", tokens.LT(1).getText());
        assertEquals("34", tokens.LT(-1).getText());

        tokens.consume();
        assertEquals(Token.EOF, tokens.LA(1));
        assertEquals(";", tokens.LT(-1).getText());

        assertEquals("34", tokens.LT(-2).getText());
        assertEquals("=", tokens.LT(-3).getText());
        assertEquals("x", tokens.LT(-4).getText());
    }

	@Test testFetchOffChannel(): void {
		let lexer: TokenSource =  // simulate input " x =34  ; \n"
		                    // token indexes   01234 56789
			TokenSource(): new {
				let i: number =  0;
				@SuppressWarnings("serial")
				let tokens: WritableToken[] =  {
				CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}}, // 0
				CommonToken(1, "x"): new,								// 1
				CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}},	// 2
				CommonToken(1, "="): new,								// 3
				CommonToken(1, "34"): new,							// 4
				CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}},	// 5
				CommonToken(1, " "): new {{channel = Lexer.HIDDEN;}}, // 6
				CommonToken(1, ";"): new,								// 7
				CommonToken(1, " "): new  {{channel = Lexer.HIDDEN;}},// 8
				CommonToken(1, "\n"): new {{channel = Lexer.HIDDEN;}},// 9
				CommonToken(Token.EOF, ""): new						// 10
				};
				@Override
				nextToken(): Token {
					return tokens[i++];
				}
				@Override
				getSourceName(): string { return "test"; }
				@Override
				getCharPositionInLine(): number {
					return 0;
				}
				@Override
				getLine(): number {
					return 0;
				}
				@Override
				getInputStream(): CharStream {
					return null;
				}

				@Override
				getTokenFactory(): TokenFactory {
					return CommonTokenFactory.DEFAULT;
				}

				@Override
				setTokenFactory(factory: TokenFactory): void {
				}
			};

		let tokens: CommonTokenStream =  new CommonTokenStream(lexer);
		tokens.fill();
		assertEquals(null, tokens.getHiddenTokensToLeft(0));
		assertEquals(null, tokens.getHiddenTokensToRight(0));

		assertEquals("[[@0,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToLeft(1).toString());
		assertEquals("[[@2,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToRight(1).toString());

		assertEquals(null, tokens.getHiddenTokensToLeft(2));
		assertEquals(null, tokens.getHiddenTokensToRight(2));

		assertEquals("[[@2,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToLeft(3).toString());
		assertEquals(null, tokens.getHiddenTokensToRight(3));

		assertEquals(null, tokens.getHiddenTokensToLeft(4));
		assertEquals("[[@5,0:0=' ',<1>,channel=1,0:-1], [@6,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToRight(4).toString());

		assertEquals(null, tokens.getHiddenTokensToLeft(5));
		assertEquals("[[@6,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToRight(5).toString());

		assertEquals("[[@5,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToLeft(6).toString());
		assertEquals(null, tokens.getHiddenTokensToRight(6));

		assertEquals("[[@5,0:0=' ',<1>,channel=1,0:-1], [@6,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToLeft(7).toString());
		assertEquals("[[@8,0:0=' ',<1>,channel=1,0:-1], [@9,0:0='\\n',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToRight(7).toString());

		assertEquals(null, tokens.getHiddenTokensToLeft(8));
		assertEquals("[[@9,0:0='\\n',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToRight(8).toString());

		assertEquals("[[@8,0:0=' ',<1>,channel=1,0:-1]]",
					 tokens.getHiddenTokensToLeft(9).toString());
		assertEquals(null, tokens.getHiddenTokensToRight(9));
	}

	@Test
	testSingleEOF(): void {
		let lexer: TokenSource =  new TokenSource() {

			@Override
			nextToken(): Token {
				return new CommonToken(Token.EOF);
			}

			@Override
			getLine(): number {
				return 0;
			}

			@Override
			getCharPositionInLine(): number {
				return 0;
			}

			@Override
			getInputStream(): CharStream {
				return null;
			}

			@Override
			getSourceName(): string {
				return IntStream.UNKNOWN_SOURCE_NAME;
			}

			@Override
			getTokenFactory(): TokenFactory {
				throw new UnsupportedOperationException("Not supported yet.");
			}

			@Override
			setTokenFactory(factory: TokenFactory): void {
				throw new UnsupportedOperationException("Not supported yet.");
			}
		};

		let tokens: CommonTokenStream =  new CommonTokenStream(lexer);
		tokens.fill();

		assertEquals(Token.EOF, tokens.LA(1));
		assertEquals(0, tokens.index());
		assertEquals(1, tokens.size());
	}

	@Test(expected = IllegalStateException.class)
	testCannotConsumeEOF(): void {
		let lexer: TokenSource =  new TokenSource() {

			@Override
			nextToken(): Token {
				return new CommonToken(Token.EOF);
			}

			@Override
			getLine(): number {
				return 0;
			}

			@Override
			getCharPositionInLine(): number {
				return 0;
			}

			@Override
			getInputStream(): CharStream {
				return null;
			}

			@Override
			getSourceName(): string {
				return IntStream.UNKNOWN_SOURCE_NAME;
			}

			@Override
			getTokenFactory(): TokenFactory {
				throw new UnsupportedOperationException("Not supported yet.");
			}

			@Override
			setTokenFactory(factory: TokenFactory): void {
				throw new UnsupportedOperationException("Not supported yet.");
			}
		};

		let tokens: CommonTokenStream =  new CommonTokenStream(lexer);
		tokens.fill();

		assertEquals(Token.EOF, tokens.LA(1));
		assertEquals(0, tokens.index());
		assertEquals(1, tokens.size());
		tokens.consume();
	}
}
