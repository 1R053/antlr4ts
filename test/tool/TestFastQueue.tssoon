/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ConvertTo-TS run at 2016-10-04T11:27:07.9792943-07:00

// import org.antlr.runtime.misc.FastQueue;
// import org.junit.Test;

// import static org.junit.Assert.assertEquals;

export class TestFastQueue {
    @Test testQueueNoRemove(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.add("c");
        q.add("d");
        q.add("e");
        let expecting: string =  "a b c d e";
        let found: string =  q.toString();
        assertEquals(expecting, found);
    }

    @Test testQueueThenRemoveAll(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.add("c");
        q.add("d");
        q.add("e");
        let buf: StringBuilder =  new StringBuilder();
        while ( q.size()>0 ) {
            let o: string =  q.remove();
            buf.append(o);
            if ( q.size()>0 ) buf.append(" ");
        }
        assertEquals("queue should be empty", 0, q.size());
        let expecting: string =  "a b c d e";
        let found: string =  buf.toString();
        assertEquals(expecting, found);
    }

    @Test testQueueThenRemoveOneByOne(): void {
        let buf: StringBuilder =  new StringBuilder();
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        buf.append(q.remove());
        q.add("b");
        buf.append(q.remove());
        q.add("c");
        buf.append(q.remove());
        q.add("d");
        buf.append(q.remove());
        q.add("e");
        buf.append(q.remove());
        assertEquals("queue should be empty", 0, q.size());
        let expecting: string =  "abcde";
        let found: string =  buf.toString();
        assertEquals(expecting, found);
    }

    // E r r o r s

    @Test testGetFromEmptyQueue(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        let msg: string =  null;
        try { q.remove(); }
        catch (NoSuchElementException nsee) {
            msg = nsee.getMessage();
        }
        let expecting: string =  "queue index 0 > last index -1";
        let found: string =  msg;
        assertEquals(expecting, found);
    }

    @Test testGetFromEmptyQueueAfterSomeAdds(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.remove();
        q.remove();
        let msg: string =  null;
        try { q.remove(); }
        catch (NoSuchElementException nsee) {
            msg = nsee.getMessage();
        }
        let expecting: string =  "queue index 0 > last index -1";
        let found: string =  msg;
        assertEquals(expecting, found);
    }

    @Test testGetFromEmptyQueueAfterClear(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.clear();
        let msg: string =  null;
        try { q.remove(); }
        catch (NoSuchElementException nsee) {
            msg = nsee.getMessage();
        }
        let expecting: string =  "queue index 0 > last index -1";
        let found: string =  msg;
        assertEquals(expecting, found);
    }
}
