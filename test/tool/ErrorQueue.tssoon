/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ConvertTo-TS run at 2016-10-04T11:27:01.7710623-07:00

// import org.stringtemplate.v4.ST;

export class ErrorQueue implements ANTLRToolListener {
	tool: Tool; 
	infos: List<string> =  new ArrayList<String>();
	errors: List<ANTLRMessage> =  new ArrayList<ANTLRMessage>();
	warnings: List<ANTLRMessage> =  new ArrayList<ANTLRMessage>();
	all: List<ANTLRMessage> =  new ArrayList<ANTLRMessage>();

	 constructor()  {
		this(null);
	}

	 constructor1(tool: Tool)  {
		this.tool = tool;
	}

	@Override
	info(msg: string): void {
		infos.add(msg);
	}

	@Override
	error(msg: ANTLRMessage): void {
		errors.add(msg);
        all.add(msg);
	}

	@Override
	warning(msg: ANTLRMessage): void {
		warnings.add(msg);
        all.add(msg);
	}

	error(msg: ToolMessage): void {
		errors.add(msg);
		all.add(msg);
	}

	size(): number {
		return all.size() + infos.size();
	}

	@Override
	toString(): string {
		return toString(false);
	}

	toString(rendered: boolean): string {
		if (!rendered) {
			return Utils.join(all.iterator(), "\n");
		}

		if (tool == null) {
			throw new IllegalStateException(String.format("No %s instance is available.", Tool.class.getName()));
		}

		let buf: StringBuilder =  new StringBuilder();
		for (let m of all) {
			let st: ST =  tool.errMgr.getMessageTemplate(m);
			buf.append(st.render());
			buf.append("\n");
		}

		return buf.toString();
	}

}

