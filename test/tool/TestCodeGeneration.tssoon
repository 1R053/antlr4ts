/*
 * [The "BSD license"]
 *  Copyright (c) 2014 Terence Parr
 *  Copyright (c) 2014 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ConvertTo-TS run at 2016-10-04T11:27:06.6353741-07:00

// import org.antlr.runtime.RecognitionException;
// import org.junit.Test;
// import org.stringtemplate.v4.AutoIndentWriter;
// import org.stringtemplate.v4.InstanceScope;
// import org.stringtemplate.v4.Interpreter;
// import org.stringtemplate.v4.ST;
// import org.stringtemplate.v4.STGroup;
// import org.stringtemplate.v4.STWriter;
// import org.stringtemplate.v4.misc.ErrorManager;
// import org.stringtemplate.v4.misc.ErrorType;

// import static org.junit.Assert.assertFalse;

export class TestCodeGeneration extends BaseTest {
	@Test testArgDecl(): void { // should use template not string
		let equeue: ErrorQueue =  new ErrorQueue();
		let g: string = 
				"grammar T;\n" +
				"a[int xyz] : 'a' ;\n";
		let evals: List<string> =  getEvalInfoForString(g, "int xyz");
		console.log(evals);
		for (let i = 0; i < evals.size(); i++) {
			let eval: string =  evals.get(i);
			assertFalse("eval should not be POJO: "+eval, eval.startsWith("<pojo:"));
		}
	}

	/** Add tags around each attribute/template/value write */
	public static class DebugInterpreter extends Interpreter {
		let evals: List<string> =  new ArrayList<String>();
		let myErrMgrCopy: ErrorManager; 
		let tab: number =  0;
		public DebugInterpreter(STGroup group, ErrorManager errMgr, boolean debug) {
			super(group, errMgr, debug);
			myErrMgrCopy = errMgr;
		}

		@Override
		protected writeObject(out: STWriter, scope: InstanceScope, o: any, options: string[]): number {
			if ( o instanceof ST ) {
				let name: string =  ((ST)o).getName();
				name = name.substring(1);
				if ( !name.startsWith("_sub") ) {
					try {
						out.write("<ST:" + name + ">");
						evals.add("<ST:" + name + ">");
						let r: number =  super.writeObject(out, scope, o, options);
						out.write("</ST:" + name + ">");
						evals.add("</ST:" + name + ">");
						return r;
					} catch (IOException ioe) {
						myErrMgrCopy.IOError(scope.st, ErrorType.WRITE_IO_ERROR, ioe);
					}
				}
			}
			return super.writeObject(out, scope, o, options);
		}

		@Override
		protected writePOJO(out: STWriter, scope: InstanceScope, o: any, options: string[]): number {
			let type: Class<?> =  o.getClass();
			let name: string =  type.getSimpleName();
			out.write("<pojo:"+name+">"+o.toString()+"</pojo:"+name+">");
			evals.add("<pojo:" + name + ">" + o.toString() + "</pojo:" + name + ">");
			return super.writePOJO(out, scope, o, options);
		}

		indent(out: STWriter): void {
			for (let i=1; i<=tab; i++) {
				out.write("\t");
			}
		}
	}

	getEvalInfoForString(grammarString: string, pattern: string): List<string> {
		let equeue: ErrorQueue =  new ErrorQueue();
		let g: Grammar =  new Grammar(grammarString);
		let evals: List<string> =  new ArrayList<String>();
		if ( g.ast!=null && !g.ast.hasErrors ) {
			let sem: SemanticPipeline =  new SemanticPipeline(g);
			sem.process();

			let factory: ATNFactory =  new ParserATNFactory(g);
			if (g.isLexer()) factory = new LexerATNFactory((LexerGrammar) g);
			g.atn = factory.createATN();

			let gen: CodeGenerator =  new CodeGenerator(g);
			let outputFileST: ST =  gen.generateParser();

//			STViz viz = outputFileST.inspect();
//			try {
//				viz.waitForClose();
//			}
//			catch (Exception e) {
//				e.printStackTrace();
//			}

			let debug: boolean =  false;
			let interp: DebugInterpreter = 
					DebugInterpreter(outputFileST.groupThatCreatedThisInstance, 
							outputFileST.impl.nativeGroup.errMgr,
							debug): new;
			let scope: InstanceScope =  new InstanceScope(null, outputFileST);
			let sw: StringWriter =  new StringWriter();
			let out: AutoIndentWriter =  new AutoIndentWriter(sw);
			interp.exec(out, scope);

			for (let e of interp.evals) {
				if (e.contains(pattern)) {
					evals.add(e);
				}
			}
		}
		if ( equeue.size()>0 ) {
			System.err.println(equeue.toString());
		}
		return evals;
	}
}
